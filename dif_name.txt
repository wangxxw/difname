1.CVS及SVN都是集中式的版本控制系统，而Git是分布式版本控制系统
2.git安装完成后，还需要最后一步设置，在命令行输入：
	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"
  git config命令的--global参数，用了这个参数是设置或更改，表示你这台机器上所有的Git仓库都会
  使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。
  查看命令就把--global取掉
3.创建库版本又名仓库即目录这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，
  Git都能跟踪：
    $mkdir mytest
	$cd mytest
	$pwd  //查看位置
  然后把目录变成git管理仓库
    $git init
  当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，里面最重要的是暂存区stage。
  最后把文件添加到版本库，需要添加的文件放到mytest目录或者其子目录都可,然后执行：
    $git add test.txt   //实际是把文件修改添加到暂存区
  然后提交到仓库，实际就是把暂存区的所有内容提交到当前分支。
    $git commit -m "这是说明比如：write a test file"
  commit可以一次提交很多文件，add可以多次不同的文件比如：
    $ git add file1.txt
	$ git add file2.txt file3.txt
	$ git commit -m "add 3 files."
4.查看仓库状态，修改内容
  假如我们修改了test.txt文件
    $git status
  git status命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，readme.txt被修改过了，
  但还没有准备提交的修改。
    $git diff
  git diff顾名思义就是查看difference，能看看具体修改了什么内容。
  知道了对readme.txt作了什么修改后，再把它提交到仓库就放心多了，提交修改和提交新文件是一样的两步
    $git add test.txt
	$git commit -m "修改、增加、删除了xxx"
	$git status
  Git告诉我们当前没有需要提交的修改，而且，工作目录是干净（working directory clean）的。
5.穿梭修改版本
  假如我们做了很多次修改。我们用git log命令查看：
    $git log
  git log命令显示从最近到最远的提交日志，如果嫌输出信息太多，看得眼花缭乱的，可以试试加
  上--pretty=oneline参数：
    $git log --pretty=oneline
  看到的一大串类似3628164...882e1e0的是commit id（版本号）,为什么commit id需要用这么一大串数字表示
  呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，
  3……作为版本号，那肯定就冲突了。
  每提交一个新版本，实际上Git就会把它们自动串成一条时间线。如果使用可视化工具查看Git历史，
  就可以更清楚地看到提交历史的时间线
  要想回到任意版本（任意一次修改），就先要知道当前版本，git中用HEAD来表示，也就是最新的提交。
  上一个版本就是HEAD^,上上一个就是HEAD^^，当然往上100个版本可以写成HEAD~100。
    $git reset --hard HEAD^^
    $cat test.txt
  我们看到回到了上上一个版本。想要回去，向下找，怎么办？
    $git log
  我们发现最新的版本已经没了。这时我们就需要查看第一次的git log内容找到最新的版本号，
  只需要前面几位（位数也不宜过少）即可。如：
    $git reset --hard 5926164
	$cat test.txt
  我们发现已经回来了。
  如果你返回前面的某个版本，关掉了电脑，又想回到最新版本，找不到新版本的commit id怎么办？
  Git提供了一个命令git reflog用来记录你的每一次命令,如：
    $git reflog
	ea34578 HEAD@{0}: reset: moving to HEAD^
	5926164 HEAD@{1}: commit: append GPL
	ea34578 HEAD@{2}: commit: add distributed
	cb926e7 HEAD@{3}: commit (initial): wrote a readme file
6.撤销修改
  场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
    git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，
    我们在后面的分支管理中会再次遇到git checkout命令。
  场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
         第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
  场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退内容，
         不过前提是没有推送到远程库。
7.删除文件
  命令git rm用于删除一个文件，并且git commit提交就可以删除。如果一个文件已经被提交到版本库，
  那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本。
  如果删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本
    $ git checkout -- test.txt